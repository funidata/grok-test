#!/usr/bin/env ruby

require 'ostruct'
require 'optparse'
require 'grok-test'

options = OpenStruct.new(
  log_level: Logger::WARN,
  pattern_paths: [
    File.join(GrokTest::PATTERNS_PATH, 'patterns'),
  ],
  named_captures_only: true,
  pattern: nil,
)

parser = OptionParser.new do |p|
  p.banner = "Usage: grok-test [options] --pattern=PATTERN [INPUT-FILES]..."

  p.on("--debug") do
    options.log_level = Logger::DEBUG
  end
  p.on("--verbose") do
    options.log_level = Logger::INFO
  end

  p.on("-P", "--patterns=PATH", "Load patterns") do |path|
    options.pattern_paths << path
  end
  p.on("--all-captures", "Use all captures, not only named") do
    options.named_captures_only = false
  end
  p.on('-p', '--pattern=PATTERN', "Match pattern") do |pattern|
    options.pattern = pattern
  end
end

parser.parse!

if !options.pattern
  abort "Usage: --pattern is required"
end

if ARGV.empty?
  inputs = [GrokTest::Input.stdin]
else
  inputs = ARGV.map {|path| GrokTest::Input.open(path) }
end

$logger = Logger.new($stderr)
$logger.level = options.log_level

GrokTest.logger = $logger

grok_test = GrokTest.build(options)
errors = 0

for input in inputs
  begin
    grok_test.test(input)
  rescue GrokTest::Error => exc
    $logger.error("Test #{input} failed: #{exc}")
    errors += 1
  end
end

if errors > 0
  exit 1
else
  exit 0
end
